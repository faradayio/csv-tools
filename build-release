#!/bin/bash
#
# Usage: ./build-release <PROJECT>
#
# The latest version of this script is available at
# https://github.com/emk/rust-musl-builder/blob/master/examples/build-release
#
# Called by `.travis.yml` to build release binaries.  We use
# ekidd/rust-musl-builder to make the Linux binaries so that we can run
# them unchanged on any distro, including tiny distros like Alpine (which
# is heavily used for Docker containers).  Other platforms get regular
# binaries, which will generally be dynamically linked against libc.
#
# If you have a platform which supports static linking of libc, and this
# would be generally useful, please feel free to submit patches.

set -euo pipefail

# Command-line arguments.
PKG_NAME="$1"
BIN_NAME="$1"

# This is either a tag, or possibly something like refs/heads/feature-branch-1.
# The important thing is that we remove all slashes.
VERSION="$RELEASE_VERSION"

# Ask GCC for a triplet like "x86_64-linux-gnu".
TRIPLET="$(gcc -dumpmachine)"

cd "$PKG_NAME"

case `uname -s` in
    Linux)
        echo "Building static binaries using ekidd/rust-musl-builder"
        # Build one directory up to make sure we can see our YAML.
        docker build -t build-"$PKG_NAME"-image -f Dockerfile ..
        docker run --name build-"$PKG_NAME" build-"$PKG_NAME"-image
        mkdir -p dist
        docker cp build-"$PKG_NAME":/home/rust/src/target/x86_64-unknown-linux-musl/release/"$BIN_NAME" dist/"$BIN_NAME"
        docker rm build-"$PKG_NAME"
        docker rmi build-"$PKG_NAME"-image
        zip -j ../"$PKG_NAME"-v"$VERSION"-"$TRIPLET".zip dist/"$PKG_NAME"
        rm -rf dist/
        ;;
    Darwin)
        echo "Building standard release binaries"
        cargo build --release
        zip -j ../"$PKG_NAME"-v"$VERSION"-"$TRIPLET"-osx.zip ../target/release/"$BIN_NAME"
        ;;
    *)
        echo "Unknown platform" 2>&1
        exit 1
        ;;
esac